* Instructions
** Hardware
*** To Purchase
**** Project Box
**** Control Board with WiFi
**** Relay
**** Button
**** Float Sensor
**** Wire
**** Parastolic Pump
     A small parastolic pump.
     5 Watts is what I purchased.
     
**** Silicone Tube
     Sized that it can be connected to the parastolic pump. If the pump says it works with 6mm OD, 4mm ID then buy that.
     More than a meter worth but depends on the reseviour and plants you intend to water.
     
**** Power Supply
     >= 5 watts.
     Nice to have a switch on it.
     The end cut off so its just two wires; mark the positive and negative with a volt meter if it isn't marked.
     
**** 5 Volt Regulator
     Can take the output of your power supply as input to create 5V.

**** Buck Converter
     Takes some random input voltage and turns it into a specified output voltage.
     This is only required if your pump takes a different voltage than your power supply gives.
     
*** Assembly
    If a pin is specified without telling you what its on, its on the ESP8266 WiFi board.
    All the pins on the ESP8266 board we will be dealing with are on the same side, the ones labeled D1, D2...
    
**** Power Supply
     Make two connections come off of both wires (4 total, two negative/black and two positive/red).
     Connect one pair of positive/red and negative/black to the correct inputs of the 5V regulator.
     
**** ESP8266 WiFi Controller
     Connect the positive/red output from the 5V regulator to one of the 3V3 pins.
     Connect the negative/black output from the 5V regulator to one of the GND pins.
    
**** Float Sensor Terminal Block
     Connect one side to the GND pin and label it negative/black.
     The other side goes to D6 and label it positive/red.

**** Button
     Connect one side to the GND rail.
     The other side goes to D5.
     
**** Relay
     We will label the relay pins as such:
     +------+
     |*    *|
     |      |
     |      |
     |      |
     |*    *|
     |*    *|
     +------+
     - top left as R1
     - top right as R2
     - middle left as R3
     - middle right as R4
     - bottom left as R5
     - bottom right as R6
     One of R3 or R4 goes to D7, the other goes to GND.

     
** Software
*** Problems and Solutions
**** Flashing while watching serial debug
     If having problems, use a USB serial adapter connected via the RX and TX pins on the ESP8266.
     This allows reading of the serial port while flashing new firmwares without blocked file errors.

**** Random Crashing and restarting
     Use `esptool.py --port /dev/ttyUSB0 erase_flash`.
     It seems that when developing and flashing, sometimes it leaves code in the flash that breaks stuff.
     
**** Decoding crash traces (incomplete)
     Open the "code/espurna/espurna.ino" in Arduino-IDE.
     Compile and install libraries using the cli because the IDE is too slow.
     Download dependency zips from https://github.com/xoseperez/espurna/wiki/ArduinoIDE.
     `arduino-cli config set library.enable_unsafe_install true`
     `arduino-cli lib install --zip-path <path to the downloaded dependancy zip here>`
     `arduino-cli compile -b esp8266:esp8266:nodemcuv2`
     
*** Building ESPurna
   Clone ESPurna from eightys3v3n/espurna.
   Switch to branch plant_water.
   Checkout last working commit 2deb8d56ad4ad5cce1f024b7b91661da3881fdc7.
   
**** Edit code/platformio_override.ini
     4m is the megabytes of memory on the selected ESP8266 device.
     eightys3v3n is the username you will use to login.
     password is the password you will use to login.
#+BEGIN_SRC
[env:plant_water]
extends = env:esp8266-4m-base
src_build_flags = -DUSE_CUSTOM_H
#+END_SRC

**** Edit code/espurna/config/custom.h
     NODEMCU_LOLIN is the ESP8266 device we are using.
     We need to convert the D0, D1 labels into their GPIO numbers, see https://randomnerdtutorials.com/esp8266-pinout-reference-gpios/.
     RELAY1_PIN 13 means we connect the relay switch to pin D7.
     BUTTON2_PIN 14 means we connect the button to D5.
     DIGITAL1_PIN 12 means we connect the float sensor to D6.
     The other configuration options have details at https://github.com/xoseperez/espurna/wiki.
#+BEGIN_SRC
// Prevents checking of default options for this board.
#define MANUFACTURER        "NODEMCU"
#define DEVICE              "LOLIN"


// Features
#define ALEXA_SUPPORT          0
#define API_SUPPORT            1
#define BUTTON_SUPPORT         0
#define DEBUG_SERIAL_SUPPORT   1
#define DEBUG_TELNET_SUPPORT   0
#define DEBUG_UDP_SUPPORT      0
#define DEBUG_WEB_SUPPORT      1
#define DOMOTICZ_SUPPORT       0
#define ENCODER_SUPPORT        1
#define HOMEASSISTANT_SUPPORT  1 // Not sure which of these works.
#define HASS_SUPPORT           1 // Not sure which of these works.
#define I2C_SUPPORT            0
#define INFLUXDB_SUPPORT       0
#define IR_SUPPORT             0
#define LED_SUPPORT            1
#define LLMNR_SUPPORT          0
#define MDNS_SERVER_SUPPORT    0
#define MQTT_SUPPORT           1
#define NETBIOS_SUPPORT        0
#define NOFUSS_SUPPORT         1
#define NTP_SUPPORT            1
#define OTA_ARDUINOOTA_SUPPORT 0
#define RFM69_SUPPORT          0
#define RFB_SUPPORT            0
#define RPN_RULES_SUPPORT      0
#define SCHEDULER_SUPPORT      1
#define SPIFFS_SUPPORT         0
#define SSDP_SUPPORT           0
#define TELNET_SUPPORT         0
#define TERMINAL_SUPPORT       1
#define TERMINAL_MQTT_SUPPORT  0
#define TERMINAL_WEB_API_SUPPORT 0
#define THINGSPEAK_SUPPORT     0
#define TUYA_SUPPORT           0
#define UART_MQTT_SUPPORT      0
#define WEB_SUPPORT            1


// Sensors
#define ADE7953_SUPPORT        0
#define AM2320_SUPPORT         0
#define ANALOG_SUPPORT         0
#define BH1750_SUPPORT         0
#define BMP180_SUPPORT         0
#define BMX280_SUPPORT         0
#define BME680_SUPPORT         0
#define CSE7766_SUPPORT        0
#define DALLAS_SUPPORT         0
#define DHT_SUPPORT            0
#define DIGITAL_SUPPORT        1
#define ECH1560_SUPPORT        0
#define EMON_ADC121_SUPPORT    0
#define EMON_ADS1X15_SUPPORT   0
#define EMON_ANALOG_SUPPORT    0
#define EVENTS_SUPPORT         0
#define EZOPH_SUPPORT          0
#define GEIGER_SUPPORT         0
#define GUVAS12SD_SUPPORT      0
#define HLW8012_SUPPORT        0
#define LDR_SUPPORT            0
#define MAX6675_SUPPORT        0
#define MHZ19_SUPPORT          0
#define MICS2710_SUPPORT       0
#define MICS5525_SUPPORT       0
#define NTC_SUPPORT            0
#define PMSX003_SUPPORT        0
#define PULSEMETER_SUPPORT     0
#define PZEM004T_SUPPORT       0
#define SDS011_SUPPORT         0
#define SENSEAIR_SUPPORT       0
#define SHT3X_I2C_SUPPORT      0
#define SI7021_SUPPORT         0
#define SONAR_SUPPORT          0
#define T6613_SUPPORT          0
#define THERMOSTAT_SUPPORT     0
#define TMP3X_SUPPORT          0
#define V9261F_SUPPORT         0
#define VEML6075_SUPPORT       0
#define VL53L1X_SUPPORT        0
#define HDC1080_SUPPORT        0


// Configuration
#define LIGHT_SAVE_ENABLED 0
#define BUTTON_MQTT_SEND_ALL_EVENTS 1
#define MQTT_RETAIN 0

// Make the built in LED flash on WiFi activity
#define LED1_PIN 2
#define LED1_PIN_INVERSE 1
#define LED1_MODE LED_MODE_WIFI

// For the motor relay
#define RELAY1_PIN 13
#define RELAY1_TYPE RELAY_TYPE_NORMAL
#define RELAY1_PULSE_MODE RELAY_PULSE_OFF // defaults to being off (not watering)
#define RELAY1_PULSE_TIME 20 // number of seconds the relay can stay on for

// Built-in flash button
#define BUTTON1_PIN 0
#define BUTTON1_CONFIG BUTTON_PUSHBUTTON | BUTTON_DEFAULT_HIGH
#define BUTTON1_LNGCLICK BUTTON_ACTION_NONE

// Extra external button
#define BUTTON2_PIN 14
#define BUTTON2_CONFIG BUTTON_PUSHBUTTON | BUTTON_SET_PULLUP | BUTTON_DEFAULT_HIGH
#define BUTTON2_PRESS BUTTON_ACTION_PULSE
#define BUTTON2_CLICK BUTTON_ACTION_NONE
#define BUTTON2_RELEASE BUTTON_ACTION_OFF
#define BUTTON2_DBLCLICK BUTTON_ACTION_TOGGLE
#define BUTTON2_RELAY 1

// Float sensor
#define DIGITAL1_PIN 12


// Secret Configuration
#include "credentials.h"
#+END_SRC

**** Compile firmware
     Plug in the ESP8266 board via USB.
     Run `pio run -e plant_water`
     Run `esptool.py --baud 256000 --after hard_reset --chip esp8266 write_flash 0 .pio/build/plant_water/firmware.bin`
     Or to do both those at once but slower, `pio run -t upload -e plant_water`.
     This both compiles the program and flashes it to the ESP8266.

     Some times you may need to reflash the entire ESP8266 memory to avoid issues,
     Use `esptool.py erase_flash` to do that before running the above commands if you encounter random crashes.
     

* Unknown
** ESP8266 Node Pins:
  - D4/GPIO2 :: built-in LED
  - D5/GPIO14 :: extra button
  - D6/GPIO12 :: float sensor
  - D7/GPIO13 :: relay

** ESPurna Building
  env ESPURNA_FLAGS='-DNODEMCU_LOLIN' PLATFORMIO_SRC_BUILD_FLAGS='

  -DNODEMCU_LOLIN
  -DTELNET_SUPPORT=0
  -DMQTT_SUPPORT=1
  -DWEB_SUPPORT=1
  -DWEB_SSL_ENABLED=1
  #define DIGITAL_SUPPORT 1
  #define TERMINAL_MQTT_SUPPORT 1
  #define TERMINAL_WEB_API_SUPPORT 1

  #define BUTTON_MQTT_SEND_ALL_EVENTS
  #define BUTTON_MQTT_RETAIN

  -DWEB_USERNAME=eightys3v3n
  -DADMIN_PASS=w99WhvS8sWqXVT

  // LED preconfigured

  // BUTTON1 already configured to flash button

  #define RELAY1_PIN 13
  
  #define BUTTON2_PIN 13
  #define BUTTON2_CONFIG BUTTON_PUSHBUTTON | BUTTON_DEFAULT_LOW
  #define BUTTON2_RELAY 1

  #define DIGITAL1_PIN 14


  ' pio run -e esp8266-4m-base
** Manual Home Assistant Configurations
*** For switch
    #+BEGIN_SRC
switch:
  - platform: mqtt
    unique_id: watering_plant
    name: Watering Plant
    state_topic: "PlantWater/relay/0"
    command_topic: "PlantWater/water"
    payload_on: 1
    payload_off: 0
    optimistic: false
    qos: 2
    retain: false
    #+END_SRC

*** For Empty Sensor
    #+BEGIN_SRC
sensor:
  - platform: template
    sensors:
        plant_water_level:
          friendly_name: Plant Water Level
          unique_id: sensor.plant_water_level
          value_template: >
            {% if is_state('sensor.plantwater_digital_0', '0') %}
              Not Empty
            {% else %}
              Empty
            {% endif %}
          icon_template: >
            {% if is_state('binary_sensor.washing_machine', 'on') %}
              mdi:flask-empty-outline
            {% else %}
              mdi:flask-empty
            {% endif %}
    #+END_SRC
